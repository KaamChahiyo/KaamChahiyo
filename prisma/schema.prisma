// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String
  image          String?
  email          String           @unique
  emailVerified  DateTime?
  bio            String?          @db.VarChar(255)
  password       String?
  dob            DateOnly?
  status         String?
  ctznimg        String?
  role           Roles            @default(employee)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @default(now())
  deletedAt      DateTime?
  AssignedOn     Job[]            @relation("Assigned")
  PostedOn       Job[]            @relation("Posted")
  Account        Account[]
  Session        Session[]
  JobApplication JobApplication[]
  Job            Job?             @relation(fields: [jobId], references: [id])
  jobId          String?
}

enum Roles {
  employee
  employer
  admin
}

model Location {
  id          String  @id @default(cuid())
  name        String? @unique
  displayName String
  Job         Job[]
}

model PaymentMethod {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  Payment     Payment[]
}

model Payment {
  id              String        @id @default(cuid())
  status          String
  paymentDate     DateTime
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  Job         Job[]
}

model JobApplication {
  Job    Job    @relation(fields: [jobId], references: [id])
  jobId  String
  User   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([jobId, userId])
}

model Job {
  id           String           @id @default(cuid())
  title        String?
  isVerified   Boolean          @default(false)
  description  String           @db.VarChar(255)
  price        Float?
  status       String?
  postedBy     User             @relation("Posted", fields: [postedById], references: [id])
  postedById   String
  postedOn     DateTime         @default(now())
  assignedTo   User             @relation("Assigned", fields: [assignedToId], references: [id])
  assignedToId String
  assignedOn   DateTime
  Category     Category         @relation(fields: [categoryId], references: [id])
  categoryId   String
  Location     Location?        @relation(fields: [locationId], references: [id])
  locationId   String?
  User         User[]
  appliedBy    JobApplication[]
}
