// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerifiedOn DateTime?
  bio             String?   @db.VarChar(255)
  password        String
  role            Role?     @relation(fields: [roleId], references: [id])
  roleId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @default(now())
  deletedAt       DateTime?
  AssignedOn      Job[]     @relation("Assigned")
  PostedOn        Job[]     @relation("Posted")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  User        User[]
}

model Location {
  id          String  @id @default(cuid())
  name        String? @unique
  displayName String
  Job         Job[]
}

model PaymentMethod {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  Payment     Payment[]
}

model Payment {
  id              String        @id @default(cuid())
  status          String
  paymentDate     DateTime
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  Job         Job[]
}

model Job {
  id           String    @id @default(cuid())
  title        String?
  isVerified   Boolean   @default(false)
  description  String    @db.VarChar(255)
  price        Float?
  postedBy     User      @relation("Posted", fields: [postedById], references: [id])
  postedById   String
  postedOn     DateTime  @default(now())
  assignedTo   User      @relation("Assigned", fields: [assignedToId], references: [id])
  assignedToId String
  assignedOn   DateTime
  Category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   String
  Location     Location? @relation(fields: [locationId], references: [id])
  locationId   String?
}
