generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                String           @id @default(cuid())
  name              String
  image             String?
  email             String           @unique
  emailVerified     DateTime?
  isVerified        Boolean          @default(false)
  bio               String?          @db.VarChar(255)
  password          String?
  dob               DateTime?
  temporaryAddress  String?
  permananetAddress String?
  phoneNumber       String?
  status            UserStatus       @default(active)
  ctznimg           String?
  role              Roles            @default(employee)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?        @default(now())
  deletedAt         DateTime?
  jobId             String?
  balance           Float            @default(0)
  Account           Account[]
  AssignedOn        Job[]            @relation("Assigned")
  PostedOn          Job[]            @relation("Posted")
  JobApplication    JobApplication[]
  Session           Session[]
  Job               Job?             @relation(fields: [jobId], references: [id])

  @@index([jobId], map: "User_jobId_fkey")
}

model Location {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  Job         Job[]
}

model PaymentMethod {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  Payment     Payment[]
}

model Payment {
  id              String        @id @default(cuid())
  status          String
  paymentDate     DateTime
  paymentMethodId String
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@index([paymentMethodId], map: "Payment_paymentMethodId_fkey")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  Job         Job[]
}

model JobApplication {
  jobId  String
  userId String
  Job    Job    @relation(fields: [jobId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  @@id([jobId, userId])
  @@index([userId], map: "JobApplication_userId_fkey")
}

model Job {
  id           String           @id @default(cuid())
  title        String
  isVerified   Boolean          @default(false)
  description  String           @db.VarChar(255)
  price        Float
  status       JobStatus        @default(pendingApproval)
  postedById   String
  postedOn     DateTime         @default(now())
  assignedToId String?
  assignedOn   DateTime?
  categoryId   String
  locationId   String
  assignedTo   User?            @relation("Assigned", fields: [assignedToId], references: [id])
  Category     Category         @relation(fields: [categoryId], references: [id])
  Location     Location         @relation(fields: [locationId], references: [id])
  postedBy     User             @relation("Posted", fields: [postedById], references: [id])
  appliedBy    JobApplication[]
  User         User[]

  @@index([assignedToId], map: "Job_assignedToId_fkey")
  @@index([categoryId], map: "Job_categoryId_fkey")
  @@index([locationId], map: "Job_locationId_fkey")
  @@index([postedById], map: "Job_postedById_fkey")
}

enum Roles {
  employee
  employer
  admin
}

enum UserStatus {
  active
  inactive
}

enum JobStatus {
  approved
  pendingApproval
  rejected
  completed
  cancelled
  inProgress
}
